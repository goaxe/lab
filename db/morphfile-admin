#!/usr/bin/env python
# coding: UTF-8

'''This is the helper script to setup/manage your morphfile server
'''

import sys

####################
### Requires Python 2.6+
####################
if sys.version_info.major == 3:
    print 'Python 3 not supported yet. Quit now'
    sys.exit(1)
if sys.version_info.minor < 6:
    print 'Python 2.6 or above is required. Quit now'
    sys.exit(1)

import os
import time
import re
import shutil
import subprocess
import argparse
import sqlite3
import uuid
import hashlib
import getpass

try:
    import readline
    # Avoid pylint 'unused import' warning
    dummy = readline
except ImportError:
    pass

####################
### Cosntants
####################
SERVER_MANUAL_HTTP = 'https://github.com/haiwen/morphfile/wiki'
MORPHFILE_GOOGLE_GROUP = 'https://groups.google.com/forum/?fromgroups#!forum/morphfile'
MORPHFILE_WEBSITE = 'http://www.morphfile.com'
MORPHWEB_DOWNLOAD_URL = 'https://morphfile.com.cn/downloads/morphweb-latest.tar.gz'

####################
### Global variables
####################
cwd = os.getcwd()
SCRIPT_NAME = os.path.basename(sys.argv[0])

PYTHON = sys.executable

conf = {}
CONF_SERVER_NAME = 'server_name'
CONF_MCNET_DIR = 'mcnet_dir'
CONF_MORPHFILE_DIR = 'morphfile_dir'
CONF_MORPHWEB_DIR = 'morphfile_dir'
CONF_MCNET_PORT = 'mcnet_port'
CONF_MORPHFILE_PORT = 'morphfile_port'
CONF_HTTPSERVER_PORT = 'httpserver_port'
CONF_IP_OR_DOMAIN = 'ip_or_domain'

CONF_MORPHWEB_CONF = 'morphweb_conf'
CONF_MORPHWEB_DIR = 'morphweb_dir'
CONF_MORPHWEB_PORT = 'morphweb_port'

CONF_MORPHWEB_PIDFILE = 'morphweb_pidfile'
CONF_MORPHWEB_OUTLOG = 'morphweb_outlog'
CONF_MORPHWEB_ERRLOG = 'morphweb_errlog'

CONF_MCNET_CONF_EXISTS = 'mcnet_conf_exists'
CONF_MORPHFILE_CONF_EXISTS = 'morphfile_conf_exists'

CONF_ADMIN_EMAIL = 'admin_email'
CONF_ADMIN_PASSWORD = 'admin_password'

####################
### Common helper functions

def highlight(content):
    '''Add ANSI color to content to get it highlighted on terminal'''
    return '\x1b[33m%s\x1b[m' % content

def info(msg):
    print msg

def error(msg):
    print 'Error: ' + msg
    sys.exit(1)

def ask_question(desc, key=None, note=None, default=None,
                 validate=None, yes_or_no=False, invalidate_msg=None):
    '''Ask a question, return the answer. The optional validate param is a
    function used to validate the answer. If yes_or_no is True, then a boolean
    value would be returned.

    '''
    assert key or yes_or_no
    desc = highlight(desc)
    if note:
        desc += '  (%s)' % note
    if default:
        desc += '\n' + ('[default %s ]' % default)
    else:
        if yes_or_no:
            desc += '\n[yes or no]'
        else:
            desc += '\n' + ('[%s ]' % key)

    desc += '  '
    while True:
        answer = raw_input(desc)
        if not answer:
            if default:
                print ''
                return default
            else:
                continue

        answer = answer.strip()

        if yes_or_no:
            if answer != 'yes' and answer != 'no':
                print '\nPlease answer yes or no\n'
                continue
            else:
                return answer == 'yes'
        else:
            if validate and not validate(answer):
                if invalidate_msg:
                    print '\n%s\n' % invalidate_msg
                else:
                    print '\n"%s" is not a valid %s\n' % (answer, key)
                continue

        print ''
        return answer

def run_argv(argv, cwd=None, env=None, suppress_stdout=False, suppress_stderr=False):
    '''Run a program and wait it to finish, and return its exit code. The
    standard output of this program is supressed.

    '''
    with open(os.devnull, 'w') as devnull:
        if suppress_stdout:
            stdout = devnull
        else:
            stdout = sys.stdout

        if suppress_stderr:
            stderr = devnull
        else:
            stderr = sys.stderr

        proc = subprocess.Popen(argv,
                                cwd=cwd,
                                stdout=stdout,
                                stderr=stderr,
                                env=env)
        return proc.wait()

def run(cmdline, cwd=None, env=None, suppress_stdout=False, suppress_stderr=False):
    '''Like run_argv but specify a command line string instead of argv'''
    with open(os.devnull, 'w') as devnull:
        if suppress_stdout:
            stdout = devnull
        else:
            stdout = sys.stdout

        if suppress_stderr:
            stderr = devnull
        else:
            stderr = sys.stderr

        proc = subprocess.Popen(cmdline,
                                cwd=cwd,
                                stdout=stdout,
                                stderr=stderr,
                                env=env,
                                shell=True)
        return proc.wait()

def is_running(process):
    '''Detect if there is a process with the given name running'''
    argv = [
        'pgrep', '-f', process
    ]

    return run_argv(argv, suppress_stdout=True) == 0

def pkill(process):
    '''Kill the program with the given name'''
    argv = [
        'pkill', '-f', process
    ]

    run_argv(argv)

def kill(pid):
    '''Kill the program with the given pid'''
    argv = [
        'kill', pid
    ]

    run_argv(argv)

def must_mkdir(path):
    '''Create a directory, exit on failure'''
    try:
        os.mkdir(path)
    except OSError, e:
        error('failed to create directory %s:%s' % (path, e))

### END of Common helper functions
####################

def check_morphfile_install():
    '''Check if morphfile has been correctly built and installed in this
    system

    '''
    dirs = os.environ['PATH'].split(':')
    def exist_in_path(prog):
        '''Test whether prog exists in system path'''
        for d in dirs:
            if d == '':
                continue
            path = os.path.join(d, prog)
            if os.path.exists(path):
                return True

        return False

    def check_prog(name):
        if not exist_in_path(name):
            error('%s not found in PATH. Have you built and installed morphfile server?' % name)

    progs = [
        'mcnet-init',
        'morf-server-init',
        'morf-server',
        'mcnet-server',
        'httpserver',
        'morphfile-controller',
    ]

    for prog in progs:
        check_prog(prog)

def get_morphweb_env():
    '''And PYTHONPATH and MCNET_CONF_DIR/MORPHFILE_CONF_DIR to env, which is
    needed by morphweb

    '''
    morphweb_dir = conf[CONF_MORPHWEB_DIR]
    morphweb_thirdpart_dir = os.path.join(morphweb_dir, 'thirdpart')

    env = dict(os.environ)
    pypath = env.get('PYTHONPATH', '')

    pathlist = [ p for p in pypath.split(':') if p != '' ]
    pathlist.append(morphweb_thirdpart_dir)
    newpypath = ':'.join(pathlist)
    env['PYTHONPATH'] = newpypath
    env['MCNET_CONF_DIR'] = conf[CONF_MCNET_DIR]
    env['MORPHFILE_CONF_DIR'] = conf[CONF_MORPHFILE_DIR]
    return env


####################
### <setup> command
####################
def welcome():
    '''Show welcome message when running the <setup> command'''
    welcome_msg = '''\
-----------------------------------------------------------------
This script will guide you to config and setup your morphfile server.
Make sure you have read morphfile server manual at

        %s

Press [ENTER] to continue
-----------------------------------------------------------------
''' % SERVER_MANUAL_HTTP
    print welcome_msg
    raw_input()

def get_server_name():
    def validate(name):
        r = re.compile(r'^[\w]{3,15}$')
        return bool(r.match(name))
    question = 'What is the name of the server?'
    key = 'server name'
    note = '3 - 15 letters or digits'
    conf[CONF_SERVER_NAME] = ask_question(question,
                                          key=key,
                                          note=note,
                                          validate=validate)

def get_server_ip_or_domain():
    def validate(s):
        r = r'^[^.].+\..+[^.]$'
        return bool(re.match(r, s))
    question = 'What is the ip of the server?'
    key = 'ip or domain'
    note = 'For example: www.mycompany.com, 192.168.1.101'
    conf[CONF_IP_OR_DOMAIN] = ask_question(question,
                                           key=key,
                                           note=note,
                                           validate=validate)
def get_mcnet_conf_dir():
    mcnet_conf_dir = os.path.join(cwd, 'mcnet')
    mcnet_conf = os.path.join(mcnet_conf_dir, 'mcnet.conf')

    if os.path.exists(mcnet_conf_dir):
        if os.path.exists(mcnet_conf):
            question = 'It seems there already exists mcnetconfig files in %s, Do you want to use them?' % mcnet_conf_dir
            yesno = ask_question(question, yes_or_no=True)
            if not yesno:
                print highlight('\nRemove the directory %s first, and run the script again.\n' % mcnet_conf_dir)
                sys.exit(1)
            else:
                conf[CONF_MCNET_CONF_EXISTS] = True
        else:
            print 'Please remove the directory %s first, and run the script again' % mcnet_conf_dir
    else:
        conf[CONF_MCNET_CONF_EXISTS] = False

    conf[CONF_MCNET_DIR] = mcnet_conf_dir

def get_mcnet_port():
    def validate(s):
        try:
            port = int(s)
        except ValueError:
            return False

        return port > 0 and port < 65536

    question = 'Which port do you want to use for the mcnetserver?'
    key = 'mcnetserver port'
    default = '10001'
    conf[CONF_MCNET_PORT] = ask_question(question,
                                         key=key,
                                         default=default,
                                         validate=validate)

def get_morphfile_port():
    def validate(s):
        try:
            port = int(s)
        except ValueError:
            return False

        return port > 0 and port < 65536

    question = 'Which port do you want to use for the morphfile server?'
    key = 'morphfile server port'
    default = '12001'
    conf[CONF_MORPHFILE_PORT] = ask_question(question,
                                           key=key,
                                           default=default,
                                           validate=validate)

def get_httpserver_port():
    def validate(s):
        try:
            port = int(s)
        except ValueError:
            return False

        return port > 0 and port < 65536

    question = 'Which port do you want to use for the morphfile httpserver?'
    key = 'morphfile httpserver port'
    default = '8082'
    conf[CONF_HTTPSERVER_PORT] = ask_question(question,
                                              key=key,
                                              default=default,
                                              validate=validate)
def get_morphfile_data_dir():
    question = 'Where do you want to put your morphfile data?'
    key = 'morphfile-data'
    note = 'Please use a volume with enough free space'
    default = os.path.join(cwd, 'morphfile-data')
    morphfile_data_dir = ask_question(question,
                                    key=key,
                                    note=note,
                                    default=default)
    morphfile_conf = os.path.join(morphfile_data_dir, 'morphfile.conf')

    if os.path.exists(morphfile_data_dir):
        if os.path.exists(morphfile_conf):
            question = 'It seems there already exists morphfile data in %s, Do you want to use them?' % morphfile_data_dir
            yesno = ask_question(question, yes_or_no=True)
            if not yesno:
                print highlight('\nRemove the directory %s first, and run the script again.\n' % morphfile_data_dir)
                sys.exit(1)
            else:
                conf[CONF_MORPHFILE_CONF_EXISTS] = True
        else:
            info('Please remove the directory %s first, and run the script again' % morphfile_data_dir)
    else:
        conf[CONF_MORPHFILE_CONF_EXISTS] = False

    conf[CONF_MORPHFILE_DIR] = morphfile_data_dir


def create_gunicorn_conf():
    runtime_dir = os.path.join(cwd, 'morphfile-server', 'runtime')
    confpath = os.path.join(runtime_dir, 'morphweb.conf')

    if os.path.exists(confpath):
        return

    if not os.path.exists(runtime_dir):
        must_mkdir(runtime_dir)

    content = '''\
import os
daemon = True
workers = 3

# Logging
runtime_dir = os.path.dirname(__file__)
pidfile = os.path.join(runtime_dir, 'morphweb.pid')
errorlog = os.path.join(runtime_dir, 'error.log')
accesslog = os.path.join(runtime_dir, 'access.log')
'''
    try:
        with open(confpath, 'w') as fp:
            fp.write(content)
    except:
        error('Failed to write morphweb config')

def get_admin_email_password():
    info('')
    info("Now let\'s create the admin account of morphweb")
    info('')
    def validate(email):
        # whitespace is not allowed
        if re.match(r'[\s]', email):
            return False
        # must be a valid email address
        if not re.match(r'^.+@.*\..+$', email):
            return False
        return True

    key = 'admin email'
    question = 'What is the ' + highlight('email') + ' for the admin account'
    admin_email = ask_question(question,
                               key=key,
                               validate=validate)

    key = 'admin password'
    question = 'What is the ' + highlight('password') + ' for the admin account'
    admin_password = ask_question(question,
                                  key=key)

    key = 'admin password again'
    question = 'Enter the password again'
    invalidate_msg = 'Password mismatch'
    def validate_again(password):
        return password == admin_password
    ask_question(question,
                 key=key,
                 validate=validate_again,
                 invalidate_msg=invalidate_msg)

    info('This is your admin account email/password:\n')
    info('------------------------------------------')
    info('admin email:         %s' % admin_email)
    info('admin password:      %s' % admin_password)
    info('------------------------------------------')
    info('Press ENTER if the config is right, or anything else to re-config admin account')

    if raw_input() != '':
        get_admin_email_password()
    else:
        sha1 = hashlib.sha1(admin_password)
        conf[CONF_ADMIN_EMAIL] = admin_email
        conf[CONF_ADMIN_PASSWORD] = sha1.hexdigest()

def create_morphweb_admin():

    peermgr_dir = os.path.join(conf[CONF_MCNET_DIR], 'PeerMgr')
    usermgr_db = os.path.join(peermgr_dir, 'usermgr.db')

    if os.path.exists(usermgr_db):
        return

    if not os.path.exists(peermgr_dir):
        os.mkdir(peermgr_dir)

    get_admin_email_password()

    conn = sqlite3.connect(usermgr_db)
    c = conn.cursor()

    sql = 'CREATE TABLE IF NOT EXISTS EmailUser (id INTEGER NOT NULL PRIMARY KEY, email TEXT, passwd TEXT, is_staff bool NOT NULL, is_active bool NOT NULL, ctime INTEGER)'
    c.execute(sql)
    sql = r'INSERT INTO EmailUser(email, passwd, is_staff, is_active, ctime) VALUES ("%s", "%s", 1, 1, 0)' \
          % (conf[CONF_ADMIN_EMAIL], conf[CONF_ADMIN_PASSWORD])
    c.execute(sql)
    conn.commit()

    info('Successfully created your admin account')

def gen_morphweb_secret_key():
    data = str(uuid.uuid4()) + str(uuid.uuid4())
    return data[:40]

def create_morphweb_settings_py():
    morphweb_settings_py = os.path.join(cwd, 'morphweb_settings.py')
    try:
        with open(morphweb_settings_py, 'w') as fp:
            line = "SECRET_KEY = '%s'" % gen_morphweb_secret_key()
            fp.write(line)
    except Exception, e:
        error('failed to create %s: %s' % (morphweb_settings_py, e))

def move_avatar():
    morphweb_data_dir = os.path.join(cwd, 'morphweb-data')
    outside_avatar_dir = os.path.join(morphweb_data_dir, 'avatars')
    morphweb_avatar_dir = os.path.join(conf[CONF_MORPHWEB_DIR], 'media', 'avatars')

    if os.path.exists(outside_avatar_dir):
        return

    if not os.path.exists(morphweb_data_dir):
        must_mkdir(morphweb_data_dir)

    # move the avatars dir outside
    shutil.move(morphweb_avatar_dir, outside_avatar_dir)
    # make the the original avatars dir a symlink pointing to the outside dir
    os.symlink(outside_avatar_dir, morphweb_avatar_dir)

def init_morphweb():
    morphweb_dir = conf[CONF_MORPHWEB_DIR]

    # create morphweb_settings.py
    create_morphweb_settings_py()

    argv = [PYTHON, 'manage.py', 'syncdb']
    # Set proper PYTHONPATH before run django syncdb command
    env = get_morphweb_env()

    print
    print
    info('Now initializing morphweb database, please wait...')
    print

    if run_argv(argv, cwd=morphweb_dir, env=env) != 0:
        error('Morphweb syncdb failed')

    info('done')

    create_morphweb_admin()
    move_avatar()
    create_gunicorn_conf()

def check_django_version():
    '''Requires django 1.5'''
    import django
    if django.VERSION[1] != 5:
        error('Django 1.5 is required')
    else:
        del django

def check_python_module(import_name, package_name, silent=False):
    if not silent:
        info('checking %s' % package_name)
    try:
        __import__(import_name)
    except ImportError:
        error('Python module "%s" not found. Please install it first' % package_name)

def check_python_dependencies(silent=False):
    '''Ensure all python libraries we need are installed'''

    if not silent:
        info('check python modules ...')
    check_python_module('simplejson', 'simplejson', silent=silent)
    check_python_module('sqlite3', 'sqlite3', silent=silent)
    check_python_module('PIL', 'python imaging library(PIL)', silent=silent)
    check_python_module('django', 'django 1.5', silent=silent)
    check_python_module('djblets', 'djblets', silent=silent)
    check_django_version()

    print

def config_mcnet_morphfile():
    get_mcnet_conf_dir()
    if not conf[CONF_MCNET_CONF_EXISTS]:
        get_server_name()
        get_server_ip_or_domain()
        get_mcnet_port()

    get_morphfile_data_dir()
    if not conf[CONF_MORPHFILE_CONF_EXISTS]:
        get_morphfile_port()
        get_httpserver_port()

    info('This is your configuration')
    info('------------------------------------------')
    if conf[CONF_MCNET_CONF_EXISTS]:
        info('mcnetconfig:        use existing config in %s' % highlight(conf[CONF_MCNET_DIR]))
    else:
        info('mcnetconf dir:           %s' % highlight(conf[CONF_MCNET_DIR]))
        info('server name:              %s' % highlight(conf[CONF_SERVER_NAME]))
        info('server host:              %s' % highlight(conf[CONF_IP_OR_DOMAIN]))
        info('mcnetport:               %s' % highlight(conf[CONF_MCNET_PORT]))

    if conf[CONF_MORPHFILE_CONF_EXISTS]:
        info('morphfile:             use existing config in %s' % highlight(conf[CONF_MORPHFILE_DIR]))
    else:
        info('morphfile data dir:         %s' % highlight(conf[CONF_MORPHFILE_DIR]))
        info('morphfile port:             %s' % highlight(conf[CONF_MORPHFILE_PORT]))
        info('morphfile httpserver port:  %s' % highlight(conf[CONF_HTTPSERVER_PORT]))

    info('------------------------------------------')
    info('Press ENTER if the config is right, or anything else to re-config ')

    if raw_input() != '':
        config_mcnet_morphfile()
    else:
        return

def init_mcnet_morphfile():
    if not conf[CONF_MCNET_CONF_EXISTS]:
        info('Generating mcnetconfiguration...')
        argv = [
            'mcnet-init',
            '-c', conf[CONF_MCNET_DIR],
            '--name', conf[CONF_SERVER_NAME],
            '--port', conf[CONF_MCNET_PORT],
            '--host', conf[CONF_IP_OR_DOMAIN],
        ]

        if run_argv(argv) != 0:
            error('failed to init mcnetconfiguration')

        info('done')

    if not conf[CONF_MORPHFILE_CONF_EXISTS]:
        info('Generating morphfile configuration...')
        argv = [
            'morf-server-init',
            '--morphfile-dir', conf[CONF_MORPHFILE_DIR],
            '--port', conf[CONF_MORPHFILE_PORT],
            '--httpserver-port', conf[CONF_HTTPSERVER_PORT],
        ]

        if run_argv(argv) != 0:
            error('failed to init morphfile configuration')

        info('done')

    morphfile_ini = os.path.join(conf[CONF_MCNET_DIR], 'morphfile.ini')
    with open(morphfile_ini, 'w') as fp:
        fp.write(conf[CONF_MORPHFILE_DIR])

####################
### <start> command
####################
def start_controller():
    argv = [
        'morphfile-controller',
        '-c', conf[CONF_MCNET_DIR],
        '-d', conf[CONF_MORPHFILE_DIR],
    ]

    info('Starting morphfile-server...')
    if run_argv(argv) != 0:
        error('Failed to start morphfile')

    # check again after several seconds
    time.sleep(10)

    if not is_running('morphfile-controller'):
        error('Failed to start morphfile')

def start_morphweb_gunicorn():
    argv = [
        'gunicorn_django',
        '-c', conf[CONF_MORPHWEB_CONF],
        '-b', '0.0.0.0:%s' % conf[CONF_MORPHWEB_PORT],
    ]

    info('Starting morphweb...')
    env = get_morphweb_env()
    if run_argv(argv, cwd=conf[CONF_MORPHWEB_DIR], env=env) != 0:
        error('Failed to start morphweb')

    info('Morphweb running on port %s' % conf[CONF_MORPHWEB_PORT])

def start_morphweb_fastcgi():
    info('Starting morphweb in fastcgi mode...')
    argv = [
        PYTHON, 'manage.py', 'runfcgi',
        'host=127.0.0.1',
        'port=%(port)s',
        'pidfile=%(pidfile)s',
        'outlog=%(outlog)s',
        'errlog=%(errlog)s',
    ]

    cmdline = ' '.join(argv) % \
              dict(port=conf[CONF_MORPHWEB_PORT],
                   pidfile=conf[CONF_MORPHWEB_PIDFILE],
                   outlog=conf[CONF_MORPHWEB_OUTLOG],
                   errlog=conf[CONF_MORPHWEB_ERRLOG])

    env = get_morphweb_env()

    if run(cmdline, cwd=conf[CONF_MORPHWEB_DIR], env=env) != 0:
        error('Failed to start morphweb in fastcgi mode')

    info('Morphweb running on port %s (fastcgi)' % conf[CONF_MORPHWEB_PORT])


def read_morphfile_data_dir(mcnet_conf_dir):
    '''Read the location of morphfile-data from morphfile.ini, also consider the
    upgrade from older version which do not has the morphfile.ini feature

    '''
    morphfile_ini = os.path.join(mcnet_conf_dir, 'morphfile.ini')
    if os.path.exists(morphfile_ini):
        with open(morphfile_ini, 'r') as fp:
            morphfile_data_dir = fp.read()
    else:
        # In previous morphfile-admin, morphfiled-data folder must be under
        # the top level directory, so we do not store the location of
        # morphfile-data folder in morphfile.ini
        morphfile_data_dir = os.path.join(cwd, 'morphfile-data')
        if os.path.exists(morphfile_data_dir):
            with open(morphfile_ini, 'w') as fp:
                fp.write(morphfile_data_dir)

    morphfile_data_dir = morphfile_data_dir.strip()
    # print morphfile_data_dir, 'len' + str(len(morphfile_data_dir)), os.path.exists(morphfile_data_dir)
    return morphfile_data_dir

def check_config(args):
    def error_not_found(path):
        error('%s not found' % path)
    mcnet_conf_dir = os.path.join(cwd, 'mcnet')
    if not os.path.exists(mcnet_conf_dir):
        error_not_found(mcnet_conf_dir)

    mcnet_conf = os.path.join(mcnet_conf_dir, 'mcnet.conf')
    if not os.path.exists(mcnet_conf):
        error_not_found(mcnet_conf)

    morphfile_data_dir = read_morphfile_data_dir(mcnet_conf_dir)
    if not os.path.exists(morphfile_data_dir):
        error_not_found(morphfile_data_dir)

    morphfile_conf = os.path.join(morphfile_data_dir, 'morphfile.conf')
    if not os.path.exists(morphfile_conf):
        error_not_found(morphfile_conf)

    runtime_dir = os.path.join(cwd, 'morphfile-server', 'runtime')
    morphweb_conf = os.path.join(runtime_dir, 'morphweb.conf')
    if not os.path.exists(morphweb_conf):
        error_not_found(morphweb_conf)

    morphweb_dir = os.path.join(cwd, 'morphfile-server', 'morphweb')
    if not os.path.exists(morphweb_conf):
        error_not_found(morphweb_dir)

    try:
        port = int(args.port)
    except ValueError:
        error('invalid port: %s' % args.port)
    else:
        if port <= 0 or port > 65535:
            error('invalid port: %s' % args.port)

    conf[CONF_MCNET_DIR]        = mcnet_conf_dir
    conf[CONF_MORPHFILE_DIR]      = morphfile_data_dir
    conf[CONF_MORPHWEB_DIR]       = morphweb_dir
    conf[CONF_MORPHWEB_CONF]      = morphweb_conf
    conf[CONF_MORPHWEB_PORT]      = port
    conf[CONF_MORPHWEB_PIDFILE]   = os.path.join(runtime_dir, 'morphweb.pid')
    conf[CONF_MORPHWEB_OUTLOG]    = os.path.join(runtime_dir, 'access.log')
    conf[CONF_MORPHWEB_ERRLOG]    = os.path.join(runtime_dir, 'error.log')

def check_directory_layout():
    morf_server_dir = os.path.join(cwd, 'morphfile-server')
    if not os.path.exists(morf_server_dir):
        error('"morphfile-server/" not found in current directory. \nPlease run morphfile-admin in the correct directory.')

    morphweb_dir = os.path.join(morf_server_dir, 'morphweb')
    if not os.path.exists(morphweb_dir):
        error('"morphfile-server/morphweb/" not found. \nPlease download morphweb first.')

    conf[CONF_MORPHWEB_DIR] = morphweb_dir

def setup_morphfile(args):
    # avoid pylint "unused variable" warning
    dummy = args

    welcome()
    check_python_dependencies()
    config_mcnet_morphfile()
    init_mcnet_morphfile()
    init_morphweb()

    print
    print '-----------------------------------------------------------------'
    print '-----------------------------------------------------------------'
    print 'Your morphfile server configuration has been finished successfully.'
    print '-----------------------------------------------------------------'
    print '-----------------------------------------------------------------'
    print
    print 'To start/stop morphfile server:'
    print
    print highlight('         $ cd %s' % cwd)
    print highlight('         $ %s { start | stop }' % SCRIPT_NAME)
    print
    print 'If you have any problem, refer to\n'
    print
    print ' Morphfile server manual:      %s' % SERVER_MANUAL_HTTP
    print
    print ' Morphfile discussion group:   %s' % MORPHFILE_GOOGLE_GROUP
    print
    print ' Morphfile website:            %s' % MORPHFILE_WEBSITE
    print
    print 'for more information.'
    print

def check_necessary_files():
    files = [
        os.path.join(cwd, 'mcnet', 'mcnet.conf'),
        os.path.join(cwd, 'morphfile-server', 'runtime', 'morphweb.conf'),
        os.path.join(cwd, 'morphweb.db'),
        os.path.join(cwd, 'morphweb_settings.py'),
    ]

    for fpath in files:
        if not os.path.exists(fpath):
            error('%s not found' % fpath)

def start_morphfile(args):
    '''start mcnet/morphfile/morphweb/httpserver'''
    if is_running('morphfile-controller'):
        error(highlight('NOTE: Morphfile is already running'))

    check_python_dependencies(silent=True)
    if args.fastcgi:
        check_python_module('flup', 'flup', silent=True)
    else:
        check_python_module('gunicorn', 'gunicorn', silent=True)

    check_necessary_files()

    check_config(args)

    start_controller()

    if args.port:
        try:
            port = int(args.port)
        except ValueError:
            error('invalid port: %s' % args.port)
        else:
            if port <= 0 or port > 65535:
                error('invalid port: %s' % args.port)

    if args.fastcgi:
        start_morphweb_fastcgi()
    else:
        start_morphweb_gunicorn()

    info('Done')

def stop_morphfile(dummy):
    info('Stopping morphfile server')
    pkill('morphfile-controller')
    runtime_dir = os.path.join(cwd, 'morphfile-server', 'runtime')
    pidfile = os.path.join(runtime_dir, 'morphweb.pid')
    try:
        with open(pidfile, 'r') as fp:
            pid = fp.read().strip('\n ')
            if pid:
                kill(pid)
    except:
        pass

    info('done')

def reset_admin(dummy):
    '''reset morphfile admin account'''
    # Get .mcnetdirectory from argument or user input
    mcnet_dir = os.path.join(cwd, 'mcnet')

    # Test usermgr.db exists
    usermgr_db = os.path.join(mcnet_dir, 'PeerMgr/usermgr.db')
    if not os.path.exists(usermgr_db):
        error('%s NOT exists. FAILED' % usermgr_db)

    conn = sqlite3.connect(usermgr_db)
    c = conn.cursor()

    # Check whether admin user exists
    sql = 'SELECT email FROM EmailUser WHERE is_staff = 1'
    try:
        c.execute(sql)
    except sqlite3.Error, e:
        error('An error orrured: %s' % e.args[0])

    staff_list = c.fetchall()
    if staff_list:
        print 'Admin is already in database. Email as follows: '
        print '--------------------'
        for e in staff_list:
            print e[0]
        print '--------------------'
        choice = raw_input('Previous admin would be deleted, would you like to continue?[y/n] ')
        if choice == 'y':
            sql = 'DELETE FROM EmailUser WHERE is_staff = 1'
            try:
                c.execute(sql)
            except sqlite3.Error, e:
                error('An error orrured: %s' % e.args[0])
            else:
                info('Previous admin is deleted')
        else:
            conn.close()
            sys.exit(0)

    # Create admin user
    choice = raw_input('Would you like to create admin user?[y/n]')
    if choice != 'y':
        conn.close()
        sys.exit(0)

    username = raw_input('E-mail address:')
    passwd = getpass.getpass('Password:')
    passwd2 = getpass.getpass('Password (again):')
    if passwd != passwd2:
        error('Two passwords are not the same')

    enc_passwd = hashlib.sha1(passwd).hexdigest()
    sql = "INSERT INTO EmailUser(email, passwd, is_staff, is_active, ctime) VALUES ('%s', '%s', 1, 1, '%d');" % (username, enc_passwd, time.time()*1000000)
    try:
        c = conn.cursor()
        c.execute(sql)
        conn.commit()
    except sqlite3.Error, e:
        error('An error orrured: %s' % e.args[0])
    else:
        info('Admin user created successfully')

    # Close db
    conn.close()

def main():
    check_morphfile_install()
    check_directory_layout()

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='subcommands',
                                       description='')

    parser_setup = subparsers.add_parser('setup', help='setup the morphfile server')
    parser_setup.set_defaults(func=setup_morphfile)

    parser_start = subparsers.add_parser('start', help='start the morphfile server')
    parser_start.set_defaults(func=start_morphfile)

    parser_start.add_argument('--fastcgi', help='start morphweb in fastcgi mode',
                              action='store_true')

    parser_start.add_argument('--port', help='start morphweb in fastcgi mode',
                              default='8000')

    parser_stop = subparsers.add_parser('stop', help='stop the morphfile server')
    parser_stop.set_defaults(func=stop_morphfile)

    parser_reset_admin = subparsers.add_parser('reset-admin', help='reset morphfile admin account')
    parser_reset_admin.set_defaults(func=reset_admin)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()